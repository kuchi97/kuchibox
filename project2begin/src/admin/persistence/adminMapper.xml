<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin.persistence.adminMapper">

	<!-- 조건마다 다르게 검색하기 조각 sql -->
	<sql id="whereClause">
		<if test="selectBox != null and searchInput != ''"><!-- if는 mybatis에서 지원한다 -->
			<where><!-- if를 통과하면 where절(sql의)을 삽입한다 -->
				<choose><!-- switch와 비슷 -->
					<!-- 컨텐츠리스트에서 검색했을때 -->
					<when test="selectBox=='idx'">
						idx like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='email'">
						email like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='name'">
						name like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='state'">
						state like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='title'">
						title like '%'||#{searchInput}||'%'
					</when>
  					<otherwise><!-- 디폴트로 넣어줄 셀렉트값 -->
						name like '%'||#{searchInput}||'%'						
					</otherwise>
				</choose>
			</where>
		</if>
	</sql>

	<!-- /조각sql=============================== -->
	
	<!-- 멤버리스트 보여주기 -->
	<select id="listMember" resultType="admin.domain.MemberVO">
		select email, pwd, name, age, point, state from member order by email
	</select>
	
	<!-- 회원 한명의 정보 보여주기 -->
	<select id="listOneMember" resultType="admin.domain.MemberVO" parameterType="string">
		select email, pwd, name, year, age, point ,state from member where email=#{email}
	</select>

	<!-- 검색한 멤버만 보여주기 -->
	<select id="searchMember" resultType="admin.domain.MemberVO" parameterType="Map">
		select email, name, pwd, age, point, state from member
		<include refid="whereClause"/>
		order by email
	</select>
	
	<!-- 회원정보 수정하기 -->
	<update id="updateMember" parameterType="admin.domain.MemberVO">
		update member set name=#{name}, year=#{year}, age=#{age}, point=#{point}, state=#{state} where email=#{email}
	</update>
	
	
	<!-- 컨텐츠리스트 보여주기 -->
 	<select id="listContent" resultType="admin.domain.ContentVO">
		select * from content order by wdate desc
	</select>
	
	<!-- 특정 컨텐츠만 보여주기 (수정할때) -->
	<select id="selectOneContent" resultType="admin.domain.ContentVO" parameterType="string">
		select * from content where idx=#{idx}
	</select>
	
	<!-- 검색한 컨텐츠만 보여주기 -->
	<select id="searchContent" resultType="admin.domain.ContentVO" parameterType="Map">
		select * from content 
		<include refid="whereClause"/>
		order by idx 
	</select>

	<!-- 모든 유저컨텐츠리스트 보여주기 -->
 	<select id="listAllMemberContent" resultType="admin.domain.MemberContentVO">
		select * from memberContent_view order by idx
	</select>
	
	<!-- 검색한 유저의 컨텐츠리스트 보여주기 -->
	<select id="searchMemberContent" resultType="admin.domain.MemberContentVO" parameterType="Map">
		select * from memberContent_view
		<include refid="whereClause"/>
		order by idx
	</select>
	
	<!-- 특정유저의 컨텐츠리스트 보여주기 -->
	<select id="listMemberContent" resultType="admin.domain.MemberContentVO" parameterType="string">
		select * from memberContent_view
		where email=#{email} order by idx	
	</select>
	
	
	<!-- 공지사항 보여주기 -->
 	<select id="getNoticeList" resultType="admin.domain.NoticeVO">
		select * from notice order by idx desc
	</select>
	<!-- 검색한 공지사항 보여주기 -->
	<select id="selectNotice" resultType="admin.domain.NoticeVO" parameterType="Map">
		select * from notice
		<include refid="whereClause"/>
		order by idx desc
	</select>
	<!-- 공지사항 한개 가져오기 idx로-->
	<select id="selectOneNotice" resultType="admin.domain.NoticeVO" parameterType="string">
		select * from notice where idx=#{idx}
	</select>
	<!-- 공지사항 등록 -->
	<insert id="insertNotice" parameterType="admin.domain.NoticeVO">
		insert into notice values(notice_seq.nextval,#{title},#{info},sysdate,#{name})
	</insert>
	<!-- 공지사항 수정 -->
	<update id="updateNotice" parameterType="admin.domain.NoticeVO">
		update notice set title=#{title}, info=#{info} where idx=#{idx}
	</update>

</mapper>